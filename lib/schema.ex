defmodule Ectograph.Schema do

  @doc """
    Cast a Ecto schema (module) to a GraphQL schema (struct)

    @return { :ok | :error, value }
  """
  def cast_schema(arg, :ecto_to_graphql) do
    schema_name = arg.__schema__(:source)
    types = arg.__schema__(:types)

    fields = Enum.reduce types, %{}, fn t, acc ->
      type_cast = Ectograph.Type.cast_type(elem(t, 1), :ecto_to_graphql)

      if (elem(type_cast, 0) === :ok) do
        Map.put(acc, elem(t, 0), elem(type_cast, 1))
      else
        IO.inspect(t)

        acc
      end
    end

    if (Map.keys(fields) |> length) == (types |> length) do
      object_type = %GraphQL.Type.ObjectType{
        name: schema_name,
        description: "Generated by Ectograph",
        fields: fields,
      }

      { :ok, object_type }
    else
      { :error, "Not all types could be cast" }
    end
  end

end
